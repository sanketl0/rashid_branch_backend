"""
Django settings for autocount project.

Generated by 'django-admin startproject' using Django 3.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os
import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '0$4=+b)z7(s%%8(y9hzn!i0=osd5o_b5j#^smxjf&k6xsqwgaa'

# SECURITY WARNING: don't run with debug turned on in production!
if os.environ.get("DEBUG") == "False":
    DEBUG = False
else:
    DEBUG = True



ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',

   # 'django_filters',
    'company',
    'coa',
    'item',
    'purchase',
    'accounting',
    'banking',
    'salescustomer',
    # 'statement',
    'report',
    # 'login',
    'rest_framework.authtoken',
    'corsheaders',
    'sslserver',
    'transaction',
    'registration',
    'payment',

    #aws
    'storages',
    'statement',
    'ocr',
    'subuser',
    'integration',
    'filing',
    'audit'


]

AUTH_USER_MODEL="registration.user"
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    # 'PAGE_SIZE': 100,
    'DEFAULT_PAGINATION_CLASS': 'apps.core.pagination.StandardResultsSetPagination'
}

MIDDLEWARE = [

    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',

    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'autocount.AesMiddleware.AESCipherMiddleware',


]

ROOT_URLCONF = 'autocount.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS':[os.path.join(BASE_DIR,'templates'),],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],'libraries' : {
                'staticfiles': 'django.templatetags.static',
                'custom_tags':'report.templates.template_tags'
            }
        },
    },
]

WSGI_APPLICATION = 'autocount.wsgi.application'

print(f"{os.environ.get('DB_HOST')} is debug")

DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql_psycopg2',
                'NAME': os.environ.get("DB_NAME"),
                'USER':os.environ.get("DB_USER"),
                'PASSWORD':os.environ.get("DB_PASSWORD"),
                'HOST':os.environ.get("DB_HOST"),
                'PORT': os.environ.get("DB_PORT"),
                'CONN_MAX_AGE': 180

            }
}


# DATABASES = {
#             'default': {
#                 'ENGINE': 'django.db.backends.postgresql',
#                 'NAME': 'temp_restore',
#                 'USER':'postgres',
#                 'PASSWORD':'Sanket@123',
#                 'HOST':'localhost',
#                 'PORT': 5432

#             }
# }

# DATABASES = {
#             'default': {
#                 'ENGINE': 'django.db.backends.postgresql_psycopg2',
#                 'NAME': 'GeneralDB',
#                 'USER':'autocountsdb',
#                 'PASSWORD':'blessedtree123auto',
#                 'HOST':'autocountdbnew.chmxi54sbih1.ap-south-1.rds.amazonaws.com',
#                 'PORT': 5432
#
#             }
# }

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/


REST_FRAMEWORK ={'DEFAULT_SCHEMA_CLASS':'rest_framework.schemas.coreapi.AutoSchema'}
CORS_ORIGIN_ALLOW_ALL = True
# CORS_ALLOWED_ORIGINS = [
#     "https://app.auto-counts.com",
#     "https://www.auto-counts.com",
#     "http://localhost:3000",
#     "*"
#
#     # Add more allowed origins as needed
# ]
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
# MEDIA_URL = '/media/'

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
VENV_PATH = os.path.dirname(BASE_DIR)
# STATIC_ROOT = os.path.join(VENV_PATH, 'static_root')



# settings.py

AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY")
AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS")

AWS_STORAGE_BUCKET_NAME = 'auto-count-bucket'
AWS_S3_REGION_NAME = 'ap-south-1'  # e.g., 'us-east-1'

STATIC_LOCATION = 'static'
AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{STATIC_LOCATION}/'
STATICFILES_STORAGE = 'autocount.storage_backend.StaticStorage'

# Optional: To serve static files from S3, set the following


# Static files (CSS, JavaScript, etc.) settings


# Media files (user uploads) settings
PUBLIC_MEDIA_LOCATION = 'media'
MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{PUBLIC_MEDIA_LOCATION}/'
DEFAULT_FILE_STORAGE = 'autocount.storage_backend.PublicMediaStorage'


DATA_UPLOAD_MAX_NUMBER_FIELDS = 10240

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'autocount.permission.CustomPermission',
        # Add other default permission classes here if needed
    ],

    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    # 'DEFAULT_THROTTLE_RATES': {
    #     'anon': '5000/day',  # 100 requests per day for anonymous users
    #     'user': '10000/day'  # 1000 requests per day for authenticated users
    # }

    # Other DRF settings...
}
# settings.py

# REST_FRAMEWORK = {
#     'DEFAULT_PARSER_CLASSES': (
#         'rest_framework.parsers.JSONParser',
#         'rest_framework.parsers.FormParser',
#         'rest_framework.parsers.MultiPartParser',
#         'rest_framework_xml.parsers.XMLParser',
#     ),
#     'DEFAULT_RENDERER_CLASSES': (
#         'rest_framework.renderers.JSONRenderer',
#         'rest_framework.renderers.BrowsableAPIRenderer',
#         'rest_framework.renderers.AdminRenderer',
#         'rest_framework_xml.renderers.XMLRenderer',
#     ),
# }


# PUBLIC_KEY='rzp_test_jpGRZ3qK7qF4sW'
# SECRET_KEY='yrU5AIrzCqgr63uGVioACFD4'
PUBLIC_KEY = os.environ.get("RAZORPAY_PUBLIC_KEY")
RAZORPAY_SECRET_KEY = os.environ.get("RAZORPAY_SECRET_KEY")



from datetime import timedelta

SIMPLE_JWT = {
    'REFRESH_TOKEN_LIFETIME': timedelta(days=2),
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=180),
    'ROTATE_REFRESH_TOKENS': True,
}


QUEUE_URL='https://sqs.ap-south-1.amazonaws.com/484965972490/OcrQueue.fifo'